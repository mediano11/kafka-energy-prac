#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π Producer –¥–ª—è –µ–Ω–µ—Ä–≥–µ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ Kafka
"""

from kafka import KafkaProducer  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ KafkaProducer
import json  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ JSON –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
import time  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ time –¥–ª—è –∑–∞—Ç—Ä–∏–º–æ–∫
import random  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ random –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
from datetime import datetime  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ datetime –¥–ª—è —á–∞—Å–æ–≤–∏—Ö –º—ñ—Ç–æ–∫


def create_producer():
    """–°—Ç–≤–æ—Ä—é—î–º–æ Kafka producer –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
    print("üîå –ü—ñ–¥–∫–ª—é—á–∞—î–º—Å—è –¥–æ Kafka...")

    try:
        producer = KafkaProducer(
            bootstrap_servers=['localhost:9092'],  # –ê–¥—Ä–µ—Å–∞ Kafka –±—Ä–æ–∫–µ—Ä–∞
            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ Python –æ–±'—î–∫—Ç–∏ –≤ JSON
            value_serializer=lambda v: json.dumps(v, ensure_ascii=False).encode('utf-8'),
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
            acks='all',  # –ß–µ–∫–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –≤—Å—ñ—Ö —Ä–µ–ø–ª—ñ–∫
            retries=3,   # –ü–æ–≤—Ç–æ—Ä—é—î–º–æ —Å–ø—Ä–æ–±—É 3 —Ä–∞–∑–∏ –ø—Ä–∏ –Ω–µ–≤–¥–∞—á—ñ
            request_timeout_ms=30000,  # –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –±—Ä–æ–∫–µ—Ä–∞
            retry_backoff_ms=500,  # –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            batch_size=16384,  # 16KB –ø–∞–∫–µ—Ç—ñ–≤
            linger_ms=100,  # –ß–µ–∫–∞—î–º–æ 100–º—Å –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é, —â–æ–± –∑—ñ–±—Ä–∞—Ç–∏ –±—ñ–ª—å—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            compression_type='gzip',  # –°—Ç–∏—Å–Ω–µ–Ω–Ω—è –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            buffer_memory=33554432,  # 32MB –±—É—Ñ–µ—Ä –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            max_in_flight_requests_per_connection=5  # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±–∞—Ö
        )

        print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Kafka —É—Å–ø—ñ—à–Ω–µ!")
        return producer

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –∑–∞–ø—É—â–µ–Ω–æ Kafka –Ω–∞ localhost:9092")
        return None  # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None


def generate_power_data():
    """–ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∞–Ω—ñ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—ó"""
    stations = [
        {"name": "–ö–∏—ó–≤—Å—å–∫–∞ –¢–ï–°", "type": "thermal", "max_power": 1200},
        {"name": "–î–Ω—ñ–ø—Ä–æ–≤—Å—å–∫–∞ –ì–ï–°", "type": "hydro", "max_power": 800},
        {"name": "–°–æ–Ω—è—á–Ω–∞ —Ñ–µ—Ä–º–∞", "type": "solar", "max_power": 150},
        {"name": "–í—ñ—Ç—Ä—è–Ω–∞ —Ñ–µ—Ä–º–∞", "type": "wind", "max_power": 200}
    ]  # –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü—ñ–π

    station = random.choice(stations)  # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É —Å—Ç–∞–Ω—Ü—ñ—é

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
    if station["type"] == "solar":
        # –°–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ —á–∞—Å—É –¥–æ–±–∏
        hour = datetime.now().hour  # –ü–æ—Ç–æ—á–Ω–∞ –≥–æ–¥–∏–Ω–∞
        if 6 <= hour <= 18:
            power_factor = random.uniform(0.7, 0.95)  # –í–¥–µ–Ω—å
        else:
            power_factor = random.uniform(0.0, 0.1)  # –í–Ω–æ—á—ñ
    elif station["type"] == "wind":
        # –í—ñ—Ç—Ä—è–∫–∏ –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ—Ç—Ä—É
        wind_speed = random.uniform(0, 15)  # –º/—Å
        if wind_speed < 3:
            power_factor = 0  # –°–ª–∞–±–∫–∏–π –≤—ñ—Ç–µ—Ä
        elif wind_speed > 12:
            power_factor = random.uniform(0.8, 1.0)  # –°–∏–ª—å–Ω–∏–π –≤—ñ—Ç–µ—Ä
        else:
            power_factor = (wind_speed / 12) ** 2  # –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å
    else:
        # –¢–ï–° —Ç–∞ –ì–ï–° - –±—ñ–ª—å—à —Å—Ç–∞–±—ñ–ª—å–Ω—ñ
        power_factor = random.uniform(0.75, 0.95)  # –í–∏—Å–æ–∫–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å

    current_power = station["max_power"] * power_factor  # –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –≤ –ú–í—Ç

    data = {
        "station_name": station["name"],
        "station_type": station["type"],
        "timestamp": datetime.now().isoformat(),
        "power_output_mw": round(current_power, 2),
        "voltage_kv": round(random.uniform(218, 222), 1),
        "frequency_hz": round(random.uniform(49.9, 50.1), 2),
        "efficiency_percent": round(random.uniform(82, 88), 1),
        "kafka_version": "3.7.1"
    }

    return data


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    producer = create_producer()  # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ Kafka
    if not producer:
        return  # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è, –≤–∏—Ö–æ–¥–∏–º–æ

    print("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ Kafka...")
    print("üìä –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏\n")

    message_count = 0  # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    count = 0
    try:
        while count <= 5:
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∞–Ω—ñ
            power_data = generate_power_data()

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Kafka
            try:
                future = producer.send('power-station-data', power_data)  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                # –ë–ª–æ–∫—É—î–º–æ—Å—è, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –±—Ä–æ–∫–µ—Ä–∞
                record_metadata = future.get(timeout=10)  # –ß–µ–∫–∞—î–º–æ –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
                message_count += 1  # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫

                print(f"üì§ [{message_count}] {power_data['station_name']} - {power_data['power_output_mw']} –ú–í—Ç")
                print(f"   Partition: {record_metadata.partition}, Offset: {record_metadata.offset}")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

            time.sleep(3)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ 3 —Å–µ–∫—É–Ω–¥–∏
            count+=1

    except KeyboardInterrupt:
        print(f"\nüõë –ó—É–ø–∏–Ω–µ–Ω–æ. –í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {message_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")

    finally:
        # –í–∞–∂–ª–∏–≤–æ! –ó–∞–∫—Ä–∏–≤–∞—î–º–æ producer –∫–æ—Ä–µ–∫—Ç–Ω–æ
        producer.flush()  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ –±—É—Ñ–µ—Ä–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        producer.close()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        print("üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Kafka 3.7.1 –∑–∞–∫—Ä–∏—Ç–æ")


if __name__ == "__main__":
    main() 