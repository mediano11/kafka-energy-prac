#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π Consumer –¥–ª—è –µ–Ω–µ—Ä–≥–µ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ Kafka
"""

from kafka import KafkaConsumer  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ KafkaConsumer
import json  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ JSON –¥–ª—è –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
from datetime import datetime  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ datetime –¥–ª—è —á–∞—Å–æ–≤–∏—Ö –º—ñ—Ç–æ–∫
import time  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ time –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –≥—Ä—É–ø–∏


def create_consumer():
    """–°—Ç–≤–æ—Ä—é—î–º–æ Kafka consumer –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
    print("üîå –ü—ñ–¥–∫–ª—é—á–∞—î–º—Å—è –¥–æ Kafka —è–∫ Consumer...")

    try:
        consumer = KafkaConsumer(
            'power-station-data',  # Topic —è–∫–∏–π —á–∏—Ç–∞—î–º–æ
            bootstrap_servers=['localhost:9092'],  # –ê–¥—Ä–µ—Å–∞ Kafka –±—Ä–æ–∫–µ—Ä–∞
            auto_offset_reset='latest',  # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            group_id=f'energy-monitor-{int(time.time())}',  # –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –≥—Ä—É–ø–∞ consumers
            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ JSON –Ω–∞–∑–∞–¥ –≤ Python –æ–±'—î–∫—Ç–∏
            value_deserializer=lambda m: json.loads(m.decode('utf-8')),  # UTF-8 –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
            enable_auto_commit=True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∫–æ–º—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –æ—Ñ—Å–µ—Ç—ñ–≤
            auto_commit_interval_ms=5000,  # –ö–æ–º—ñ—Ç–∏–º–æ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
            session_timeout_ms=30000,  # 30 —Å–µ–∫—É–Ω–¥
            heartbeat_interval_ms=10000,  # 10 —Å–µ–∫—É–Ω–¥
            max_poll_records=500,  # –ú–∞–∫—Å–∏–º—É–º 500 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ —Ä–∞–∑
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            fetch_min_bytes=1024,  # –ú—ñ–Ω—ñ–º—É–º 1KB –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
            fetch_max_wait_ms=1000  # –ß–µ–∫–∞—î–º–æ –¥–æ 1 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
        )

        print("‚úÖ Consumer –¥–ª—è Kafka –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        return consumer  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π consumer

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        return None


def analyze_power_data(data):
    """–ê–Ω–∞–ª—ñ–∑—É—î–º–æ –µ–Ω–µ—Ä–≥–µ—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ç—É—Å–∏"""
    try:
        station = data.get('station_name', '–ù–µ–≤—ñ–¥–æ–º–∞ —Å—Ç–∞–Ω—Ü—ñ—è')
        station_type = data.get('station_type', 'unknown')
        power = data.get('power_output_mw', 0)
        voltage = data.get('voltage_kv', 0)
        frequency = data.get('frequency_hz', 0)
        efficiency = data.get('efficiency_percent', 0)
        kafka_version = data.get('kafka_version', 'unknown')

        # –°—Ç–∞—Ç—É—Å –∑–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é
        if power == 0:
            power_status = "üî¥ –í–Ü–î–ö–õ–Æ–ß–ï–ù–ê"
        elif power < 100:
            power_status = "üü° –ù–ò–ó–¨–ö–ê –ü–û–¢–£–ñ–ù–Ü–°–¢–¨"
        elif power > 1000:
            power_status = "üü¢ –í–ò–°–û–ö–ê –ü–û–¢–£–ñ–ù–Ü–°–¢–¨"
        else:
            power_status = "üü¢ –ù–û–†–ú–ê–õ–¨–ù–ê –ü–û–¢–£–ñ–ù–Ü–°–¢–¨"

        # –°—Ç–∞—Ç—É—Å –∑–∞ –Ω–∞–ø—Ä—É–≥–æ—é
        if 219 <= voltage <= 221:
            voltage_status = "üü¢ –ù–û–†–ú–ê"
        else:
            voltage_status = "üü† –í–Ü–î–•–ò–õ–ï–ù–ù–Ø"

        # –°—Ç–∞—Ç—É—Å –∑–∞ —á–∞—Å—Ç–æ—Ç–æ—é
        if 49.9 <= frequency <= 50.1:
            frequency_status = "üü¢ –ù–û–†–ú–ê"
        else:
            frequency_status = "üî¥ –ö–†–ò–¢–ò–ß–ù–û"

        # –°—Ç–∞—Ç—É—Å –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é
        if efficiency >= 85:
            efficiency_status = "üü¢ –í–Ü–î–ú–Ü–ù–ù–û"
        elif efficiency >= 80:
            efficiency_status = "üü° –î–û–ë–†–ï"
        else:
            efficiency_status = "üü† –ü–û–ì–ê–ù–û"

        return {
            'power_status': power_status,
            'voltage_status': voltage_status,
            'frequency_status': frequency_status,
            'efficiency_status': efficiency_status,
            'kafka_version': kafka_version
        }

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
        return None


def process_power_data(data):
    """–û–±—Ä–æ–±–ª—è—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ"""
    try:
        station = data.get('station_name', '–ù–µ–≤—ñ–¥–æ–º–∞ —Å—Ç–∞–Ω—Ü—ñ—è')
        station_type = data.get('station_type', 'unknown')
        power = data.get('power_output_mw', 0)
        voltage = data.get('voltage_kv', 0)
        frequency = data.get('frequency_hz', 0)
        efficiency = data.get('efficiency_percent', 0)
        timestamp = data.get('timestamp', 'unknown')

        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ
        analysis = analyze_power_data(data)

        # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìã === –ú–û–ù–Ü–¢–û–†–ò–ù–ì –ï–ù–ï–†–ì–û–°–ò–°–¢–ï–ú–ò ===")
        print(f"üè≠ –°—Ç–∞–Ω—Ü—ñ—è: {station} ({station_type.upper()})")
        print(f"üïê –ß–∞—Å: {timestamp}")
        print(f"‚ö° –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: {power} –ú–í—Ç - {analysis['power_status']}")
        print(f"üîå –ù–∞–ø—Ä—É–≥–∞: {voltage} –∫–í - {analysis['voltage_status']}")
        print(f"üìä –ß–∞—Å—Ç–æ—Ç–∞: {frequency} –ì—Ü - {analysis['frequency_status']}")
        print(f"‚öôÔ∏è –ö–ö–î: {efficiency}% - {analysis['efficiency_status']}")
        if analysis['kafka_version'] != 'unknown':
            print(f"üöÄ Kafka –≤–µ—Ä—Å—ñ—è: {analysis['kafka_version']}")

        # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        warnings = []
        if power < 50:
            warnings.append("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑—å–∫–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É")
        if voltage < 218 or voltage > 222:
            warnings.append("‚ö†Ô∏è –ù–∞–ø—Ä—É–≥–∞ –ø–æ–∑–∞ –¥–æ–ø—É—Å—Ç–∏–º–∏–º–∏ –º–µ–∂–∞–º–∏")
        if frequency < 49.8 or frequency > 50.2:
            warnings.append("üö® –ö–†–ò–¢–ò–ß–ù–û: –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ - –Ω–µ–≥–∞–π–Ω—ñ –¥—ñ—ó!")
        if efficiency < 75:
            warnings.append("‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π –ö–ö–î - –ø–æ—Ç—Ä—ñ–±–Ω–µ —Ç–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è")

        if warnings:
            print("\nüö® –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø:")
            for warning in warnings:
                print(f"   {warning}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ —Ç–∏–ø—É —Å—Ç–∞–Ω—Ü—ñ—ó
        if station_type == "solar" and power < 50:
            print("üí° –ú–æ–∂–ª–∏–≤–æ —Ö–º–∞—Ä–Ω–∞ –ø–æ–≥–æ–¥–∞ - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å–æ–Ω—è—á–Ω–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π")
        elif station_type == "wind" and power < 50:
            print("üí° –ú–æ–∂–ª–∏–≤–æ –Ω–∏–∑—å–∫–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –≤—ñ—Ç—Ä—è–∫—ñ–≤")

        print("-" * 55)

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}")
        print(f"üìù –°–∏—Ä—ñ –¥–∞–Ω—ñ: {data}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    consumer = create_consumer()
    if not consumer:
        return

    print("üëÄ –û—á—ñ–∫—É—î–º–æ –¥–∞–Ω—ñ –≤—ñ–¥ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ–π...")
    print("üõë –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏\n")

    message_count = 0

    try:
        for message in consumer:
            message_count += 1

            print(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è #{message_count}")
            print(f"üìç Topic: {message.topic}, Partition: {message.partition}, Offset: {message.offset}")

            process_power_data(message.value)

    except KeyboardInterrupt:
        print(f"\nüõë Consumer –∑—É–ø–∏–Ω–µ–Ω–æ. –û–±—Ä–æ–±–ª–µ–Ω–æ {message_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")

    finally:
        consumer.close()
        print("üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")


if __name__ == "__main__":
    main()